@page "/Account/Register"
@using Portathon_Hackathon.Client.Services.Abstract;
@using Portathon_Hackathon.Shared.Entities;
@inject IAuthManager _authManager
@inject NavigationManager _navigationManager
@inject IToastService _toastrService
@using Microsoft.AspNetCore.Components.Forms


<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <!-- Logo or Image -->
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <!-- Logo or Image -->
                        <div class="text-center mb-5">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp" alt="Company Logo" class="img-fluid" />
                        </div>

                    </div>
                </div>
            </div>


            <EditForm Model="userRegister" OnValidSubmit="HandleRegistration">
                <!-- Name input -->
                <div class="form-group">
                    <label for="Email" class="form-label">Email</label>
                    <InputText type="email" id="registerName" @bind-Value="userRegister.Email" class="form-control" />
                </div>
                
                <!-- Username input -->
                <div class="form-group">
                    <label for="registerUsername" class="form-label">Username</label>
                    <InputText type="text" id="registerUsername" @bind-Value="userRegister.Username" class="form-control" />
                </div>

                <!-- Password input -->
                <div class="form-group">
                    <label for="registerPassword" class="form-label">Password</label>
                    <InputText type="password" id="registerPassword" @bind-Value="userRegister.Password" class="form-control" />
                </div>
              
                <!-- Repeat Password input -->
                <div class="form-group">
                    <label for="registerRepeatPassword" class="form-label">Repeat password</label>
                    <InputText type="password" id="registerRepeatPassword" @bind-Value="userRegister.ConfirmPassword" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="registerRepeatPassword" class="form-label">Choose Role</label>

                    <InputSelect class="form-control" @bind-Value="userRegister.UserType">
                        <option value="0">User</option>
                        <option value="1">Company</option>
                    </InputSelect>
                </div>
            
                <!-- Checkbox -->
                <div class="form-check d-flex justify-content-center mb-4">
                    <input class="form-check-input me-2" type="checkbox" value="" id="registerCheck" checked
                           aria-describedby="registerCheckHelpText" />
                    <label class="form-check-label" for="registerCheck">
                        I have read and agree to the terms
                    </label>
                </div>

                <!-- Submit button -->

                <div class="text-center mt-3">
                    <button type="submit" class="btn btn-primary btn-block mb-3">Sign Up</button>
                    <p>Are you already a member? <a href="/Account/Login">Sign in</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>




@code {
    UserRegisterModel userRegister = new UserRegisterModel();


    private async Task HandleRegistration()
    {
        UserRegister user = new UserRegister
            {
                ConfirmPassword = userRegister.ConfirmPassword,
                Email = userRegister.Email,
                Username = userRegister.Username,
                Password = userRegister.Password,
                UserType = userRegister.UserType.ToString(),
            };




        var result = await _authManager.CreateUser(user);
        if (result.Success == false)
        {

            _toastrService.ShowError(result.Message);
        }
        else
        {
            _navigationManager.NavigateTo("Account/Login");

        }
        if (!result.Success)
        {
        }
        else
        {
        }
    }   

   
}
